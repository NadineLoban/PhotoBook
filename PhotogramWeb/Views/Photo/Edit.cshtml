@model DomainViewModels.ViewModels.PhotoUpdateInfoViewModel

@{
    ViewBag.Title = @Resources.UIStrings.EditPhoto;
}

<script src="~/Scripts/claudinary-effect.js"></script>

<h2>@ViewBag.Title</h2>
@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)

        
    <div class="row">
        <div class="col-lg-5">
            <div class="well ">
                <fieldset>
                    <div class="form-group">
                        @Html.HiddenFor(model => model.Id)
                        
                        @Html.LabelFor(model => model.Description, new { @class = "control-label"})
                        <br/>
                        @Html.EditorFor(model => model.Description, new { @class = "col-lg-10 form-control"})
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                    <div class="form-group"> 
                        @Html.LabelFor(m => m.TagsString, new { @class = "control-label"})
                        @Html.TextBoxFor(model => model.TagsString, new { @id = "tags", @class = "col-lg-10 form-control", @value=Model.TagsString})
                    </div>
                    
                </fieldset>
            </div>
        </div>
        
    </div>
    <div class="row-fluid">
        <div class="span5">
            <h4>@Resources.UIStrings.OriginalPhoto</h4>
            <img src="@Html.DisplayFor(model => model.OriginalPhoto.Url)" style="height: 350px; width: 350px"/>
        </div>
        <div class="span2" style="text-align:center;">
            <h4>@Resources.UIStrings.Effects</h4>
            @Html.DropDownList(@Resources.UIStrings.Effects, new SelectList(Model.EffectsViewModels , "EffectName" , "EffectShowName"), new { @onchange="javascript:selectEffect()", @id="effect"})
            <div style="padding-top: 5px; text-align:center;">
                <input type="button" id="preview" onclick="runPreview()" value="@Resources.UIStrings.Preview" class="btn-danger" style="padding-top: 5px;"/>
            </div>
            <div style="padding-top: 8px">
                <input type="text" disabled="disabled" id="amount" style="border: 0; color: #f6931f; font-weight: bold; margin: auto; width: 45px;" />
            </div>
            <div id="slider-vertical" style="height: 200px; margin: auto;"></div>
        </div>
        <div class="span5">
            <h4>@Resources.UIStrings.PhotoWithFilter</h4>
            @Html.HiddenFor(model => model.OriginalPhoto.PublicId, new {@id = "publicId"})
            @Html.HiddenFor(model => model.ModifiedPhoto, new {@id = "modifiedUrl"})
            <img src="@Html.DisplayFor(model => model.ModifiedPhoto)" id="modifiedPhoto" style="height: 350px; width: 350px;"/>

        </div>
        <br/>
        <br/>
        <p align="center">
            <button type="submit" class="btn-info">@Resources.UIStrings.Save</button>
        </p>
        
 </div>
       
    <script>
        function runPreview() {
            var publicId = $("#publicId").val();
            $.ajax({
                url: '@Url.Action("SetEffect", "Photo")',
                type: 'GET',
                data: {
                    publicId: publicId,
                    effectName: $("#effect").val(),
                    valueOfEffect: $("#amount").val()
                },
                success: function (result) {
                    $("img#modifiedPhoto").attr("src", result);
                    $("#modifiedUrl").val(result);
                },
                error: function (e) { display(e); }
            });
        }
    </script>
    <script>    
        $('#tags').tagit({
            autocomplete: {
                source: function (request, response) {
                    $.ajax({
                        type:"POST",
                        url: '@Url.Action("GelAllTags", "Tag")',
                        dataType: "json",
                        data: {
                            term: request.term
                        },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item,
                                    value: item
                                };
                            }));
                        },
                        error: function (xhr, status, error) {
                        }
                    });
                }
            },
            minLength: 2
        });
    </script>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
